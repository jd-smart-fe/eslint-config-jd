// Generated by CoffeeScript 1.8.0
(function() {
  var EditorConfigError, LineRule, MaxLineLength, W,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  LineRule = require('../line-rule');

  W = require('when');

  EditorConfigError = require('../editorconfigerror');


  /**
   * @todo Implement fixing and inferring properly. It sucks right now.
   */

  MaxLineLength = (function(_super) {
    __extends(MaxLineLength, _super);

    function MaxLineLength() {
      this.inferLine = __bind(this.inferLine, this);
      this.checkLine = __bind(this.checkLine, this);
      return MaxLineLength.__super__.constructor.apply(this, arguments);
    }

    MaxLineLength.prototype.propertyName = 'max_line_length';


    /**
     * Lifted from end_of_line.coffee
     */

    MaxLineLength.prototype._eolRegex = /(?:\r\n|\n|\r)?$/;

    MaxLineLength.prototype.infer = function() {
      var deferred;
      deferred = W.defer();
      deferred.resolve(80);
      return deferred.promise;
    };

    MaxLineLength.prototype.checkLine = function(line, lineNum) {
      var lineLength;
      lineLength = this.inferLine(line);
      if (lineLength > this.setting) {
        throw new EditorConfigError("line is " + lineLength + " chars, it should be " + this.setting, this.file.path, lineNum);
      }
    };

    MaxLineLength.prototype.inferLine = function(line) {
      var _ref;
      return line.length - ((_ref = line.match(this._eolRegex)) != null ? _ref[0].length : void 0);
    };

    return MaxLineLength;

  })(LineRule);

  module.exports = MaxLineLength;

}).call(this);
