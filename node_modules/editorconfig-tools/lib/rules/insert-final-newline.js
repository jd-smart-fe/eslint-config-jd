// Generated by CoffeeScript 1.8.0
(function() {
  var InsertFinalNewline, Rule,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Rule = require('../rule');

  InsertFinalNewline = (function(_super) {
    __extends(InsertFinalNewline, _super);

    function InsertFinalNewline() {
      this.infer = __bind(this.infer, this);
      this.fix = __bind(this.fix, this);
      return InsertFinalNewline.__super__.constructor.apply(this, arguments);
    }

    InsertFinalNewline.prototype.propertyName = 'insert_final_newline';


    /**
     * @type {Regex}
     * @private
     */

    InsertFinalNewline.prototype._finalNewline = /(?:\r\n|\n|\r)?$/;

    InsertFinalNewline.prototype.fix = function() {
      return InsertFinalNewline.__super__.fix.call(this).then((function(_this) {
        return function() {
          return _this.file.read({
            encoding: 'utf8'
          });
        };
      })(this)).then((function(_this) {
        return function(data) {
          return _this.file.write(data.replace(_this._finalNewline, function(match) {
            if (_this.setting === false) {
              return '';
            } else {
              switch (_this.editorconfig['end_of_line']) {
                case 'crlf':
                  return '\r\n';
                case 'cr':
                  return '\r';
                default:
                  return '\n';
              }
            }
          }));
        };
      })(this));
    };

    InsertFinalNewline.prototype.infer = function() {
      return this.file.read({
        encoding: 'utf8'
      }).then((function(_this) {
        return function(data) {
          var finalNewline;
          if (data === '') {
            return true;
          }
          finalNewline = data.match(_this._finalNewline);
          return (finalNewline != null) && finalNewline[0] !== '';
        };
      })(this));
    };

    return InsertFinalNewline;

  })(Rule);

  module.exports = InsertFinalNewline;

}).call(this);
