'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function flattenRulesDiff(diff) {
  if (Array.isArray(diff)) {
    return flattenRulesDiffArray(diff);
  } else if ((typeof diff === 'undefined' ? 'undefined' : _typeof(diff)) === 'object') {
    return flattenRulesDiffObject(diff);
  }

  return [];
}

function flattenRulesDiffObject(diffObject) {
  var flattened = [];

  Object.keys(diffObject).forEach(function (ruleName) {
    var diff = diffObject[ruleName];
    var ruleRow = [ruleName].concat(Object.keys(diff).map(function (configName) {
      return diff[configName];
    }));

    flattened.push.apply(flattened, _toConsumableArray(ruleRow));
  });

  return flattened;
}

function flattenRulesDiffArray(diffArray) {
  var flattened = [];

  diffArray.forEach(function (diff) {
    flattened.push.apply(flattened, _toConsumableArray(flattenRulesDiff(diff)));
  });

  return flattened;
}

module.exports = flattenRulesDiff;