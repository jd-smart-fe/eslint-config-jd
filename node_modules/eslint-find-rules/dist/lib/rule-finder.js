'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var path = require('path');

var eslint = require('eslint');
var isAbsolute = require('path-is-absolute');
var difference = require('./array-diff');
var getSortedRules = require('./sort-rules');

function _getConfigFile(specifiedFile) {
  if (specifiedFile) {
    if (isAbsolute(specifiedFile)) {
      return specifiedFile;
    }
    return path.join(process.cwd(), specifiedFile); // eslint-disable-line import/no-dynamic-require
  }
  // This is not being called with an arg. Use the package.json `main`
  return require(path.join(process.cwd(), 'package.json')).main; // eslint-disable-line import/no-dynamic-require
}

function _getConfig(configFile) {
  var cliEngine = new eslint.CLIEngine({
    // Ignore any config applicable depending on the location on the filesystem
    useEslintrc: false,
    // Point to the particular config
    configFile: configFile
  });
  return cliEngine.getConfigForFile();
}

function _getCurrentNamesRules(config) {
  return Object.keys(config.rules);
}

function _normalizePluginName(name) {
  var scopedRegex = /(@[^/]+)\/(.+)/;
  var match = scopedRegex.exec(name);

  if (match) {
    return {
      module: match[1] + '/eslint-plugin-' + match[2],
      prefix: match[2]
    };
  }

  return {
    module: 'eslint-plugin-' + name,
    prefix: name
  };
}

function _isDeprecated(rule) {
  return rule && rule.meta && rule.meta.deprecated;
}

function _notDeprecated(rule) {
  return !_isDeprecated(rule);
}

function _getPluginRules(config) {
  var pluginRules = new Map();
  var plugins = config.plugins;
  if (plugins) {
    plugins.forEach(function (plugin) {
      var normalized = _normalizePluginName(plugin);
      var pluginConfig = require(normalized.module); // eslint-disable-line import/no-dynamic-require
      var rules = pluginConfig.rules === undefined ? {} : pluginConfig.rules;

      Object.keys(rules).forEach(function (ruleName) {
        return pluginRules.set(normalized.prefix + '/' + ruleName, rules[ruleName]);
      });
    });
  }
  return pluginRules;
}

function _getCoreRules() {
  return eslint.linter.getRules();
}

function _filterRuleNames(ruleNames, rules, predicate) {
  return ruleNames.filter(function (ruleName) {
    return predicate(rules.get(ruleName));
  });
}

function _isNotCore(rule) {
  return rule.indexOf('/') !== '-1';
}

function RuleFinder(specifiedFile, options) {
  var omitCore = options.omitCore,
      includeDeprecated = options.includeDeprecated;

  var configFile = _getConfigFile(specifiedFile);
  var config = _getConfig(configFile);
  var currentRuleNames = _getCurrentNamesRules(config);
  if (omitCore) {
    currentRuleNames = currentRuleNames.filter(_isNotCore);
  }

  var pluginRules = _getPluginRules(config); // eslint-disable-line vars-on-top
  var coreRules = _getCoreRules();
  var allRules = omitCore ? pluginRules : new Map([].concat(_toConsumableArray(coreRules), _toConsumableArray(pluginRules)));

  var allRuleNames = [].concat(_toConsumableArray(allRules.keys()));
  var pluginRuleNames = [].concat(_toConsumableArray(pluginRules.keys()));
  if (!includeDeprecated) {
    allRuleNames = _filterRuleNames(allRuleNames, allRules, _notDeprecated);
    pluginRuleNames = _filterRuleNames(pluginRuleNames, pluginRules, _notDeprecated);
  }
  var deprecatedRuleNames = _filterRuleNames(currentRuleNames, allRules, _isDeprecated);
  var dedupedRuleNames = [].concat(_toConsumableArray(new Set(allRuleNames)));
  var unusedRuleNames = difference(dedupedRuleNames, currentRuleNames);

  // Get all the current rules instead of referring the extended files or documentation
  this.getCurrentRules = function () {
    return getSortedRules(currentRuleNames);
  };

  // Get all the current rules' particular configuration
  this.getCurrentRulesDetailed = function () {
    return config.rules;
  };

  // Get all the plugin rules instead of referring the extended files or documentation
  this.getPluginRules = function () {
    return getSortedRules(pluginRuleNames);
  };

  // Get all the available rules instead of referring eslint and plugin packages or documentation
  this.getAllAvailableRules = function () {
    return getSortedRules(dedupedRuleNames);
  };

  this.getUnusedRules = function () {
    return getSortedRules(unusedRuleNames);
  };

  // Get all the current rules that are deprecated
  this.getDeprecatedRules = function () {
    return getSortedRules(deprecatedRuleNames);
  };
}

module.exports = function (specifiedFile) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return new RuleFinder(specifiedFile, options);
};